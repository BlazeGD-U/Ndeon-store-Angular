import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { SupabaseService } from './supabase.service';
import { BehaviorSubject } from 'rxjs';
import { User } from '../core/models/user.model';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private isAuthenticatedSubject = new BehaviorSubject<boolean>(false);
  isAuthenticated$ = this.isAuthenticatedSubject.asObservable();
  private currentUser: User | null = null;

  constructor(
    private router: Router,
    private supabaseService: SupabaseService
  ) {
    // Check for user in session storage on service initialization
    const savedUser = sessionStorage.getItem('currentUser');
    if (savedUser) {
      this.currentUser = JSON.parse(savedUser);
      this.isAuthenticatedSubject.next(true);
    }
  }

  async login(usuario: string, contrasena: string): Promise<User | null> {
    const { data: users, error } = await this.supabaseService.getUsuarios();
    if (error) {
      console.error('Error fetching users for login:', error);
      return null;
    }

    // Find user by usuario and contrasena
    const user = users?.find((u: User) => u.usuario === usuario && u.contrasena === contrasena);
    
    if (user) {
      this.currentUser = user;
      sessionStorage.setItem('currentUser', JSON.stringify(user));
      this.isAuthenticatedSubject.next(true);

      // Redirect to home after successful login
      this.router.navigate(['/home']);

      return this.currentUser;
    } else {
      this.currentUser = null;
      this.isAuthenticatedSubject.next(false);
      sessionStorage.removeItem('currentUser');
      return null;
    }
  }

  async register(usuario: string, contrasena: string): Promise<string | null> {
    const { data: existingUsers, error: fetchError } = await this.supabaseService.getUsuarios();
    if (fetchError) {
      console.error('Error fetching users for registration:', fetchError);
      return 'Error de conexiÃ³n.';
    }

    if (existingUsers && existingUsers.some((u: User) => u.usuario === usuario)) {
      return 'El usuario ya existe.';
    }
    
    // Create new user
    const newUser = { usuario, contrasena }; // Assuming id is auto-generated by Supabase
    const { error: insertError } = await this.supabaseService.createUsuario(newUser);

    if (insertError) {
      console.error('Error al registrar usuario en Supabase:', insertError);
      return 'Error al registrar usuario.';
    }

    return null; // Registration successful
  }

  logout(): void {
    this.currentUser = null;
    this.isAuthenticatedSubject.next(false);
    sessionStorage.removeItem('currentUser');
    this.router.navigate(['/login']);
  }

  async getCurrentUser(): Promise<User | null> {
    // Check session storage if currentUser is null (e.g., on page refresh)
    if (!this.currentUser) {
      const savedUser = sessionStorage.getItem('currentUser');
      if (savedUser) {
        this.currentUser = JSON.parse(savedUser);
        this.isAuthenticatedSubject.next(true);
      }
    }
    return this.currentUser;
  }

  async getUsers(): Promise<User[]> {
    const { data: users, error } = await this.supabaseService.getUsuarios();
    if (error) {
      console.error('Error fetching users:', error);
      return [];
    }
    // Return all users
    return users || [];
  }

  async deleteUser(id: number): Promise<boolean> {
    const { error } = await this.supabaseService.deleteUsuario(id);
    if (error) {
      console.error('Error deleting user:', error);
      return false;
    }
    return true;
  }

  // Method to update user profile (assuming only usuario or contrasena can be updated)
  async updateUser(user: User): Promise<boolean> {
    // Ensure the user object has an id for the update operation
    if (!user || !user.id) {
      console.error('User object missing id for update.');
      return false;
    }
    // Only send fields that can be updated
    const updatePayload = { usuario: user.usuario, contrasena: user.contrasena };
    const { error } = await this.supabaseService.updateUsuario(user.id, updatePayload);
    if (error) {
      console.error('Error updating user:', error);
      return false;
    }
    // Update local currentUser if it's the one being updated
    if (this.currentUser && this.currentUser.id === user.id) {
      this.currentUser = { ...this.currentUser, ...updatePayload }; // Update only the changed fields
      sessionStorage.setItem('currentUser', JSON.stringify(this.currentUser));
      // isAuthenticatedSubject does not need to be updated here
    }
    return true;
  }
} 